diff -Naur gnome-calendar-41.2.orig/meson.build gnome-calendar-41.2/meson.build
--- gnome-calendar-41.2.orig/meson.build	2024-08-07 19:26:50.756373331 -0000
+++ gnome-calendar-41.2/meson.build	2024-08-07 20:13:55.574930109 -0000
@@ -160,19 +160,19 @@
        'Error: icaltime_days_in_year() not found in libical!. Upgrade your libical library.')
 
 gsettings_desktop_schemas_dep = dependency('gsettings-desktop-schemas', version: '>= 3.21.2')
-libedataserverui_dep = dependency('libedataserverui-1.2', version: '>= 3.17.1')
-libedataserver_dep = dependency('libedataserver-1.2', version: '>= 3.17.1')
-libecal_dep = dependency('libecal-2.0', version: '>= 3.33.2')
-libsoup_dep = dependency('libsoup-2.4')
+libedataserverui_dep = dependency('libedataserverui-1.2', version: '>= 3.45.1')
+libedataserver_dep = dependency('libedataserver-1.2', version: '>= 3.45.1')
+libecal_dep = dependency('libecal-2.0', version: '>= 3.45.1')
+libsoup_dep = dependency('libsoup-3.0')
 libdazzle_dep = dependency('libdazzle-1.0', version: '>= 3.33.1')
 libhandy_dep = dependency('libhandy-1', version: '>= 1.0.0')
 glib_dep = dependency('glib-2.0', version: '>= 2.67.5')
 gtk_dep = dependency('gtk+-3.0', version: '>= 3.22.20')
 gio_dep = dependency('gio-2.0', version: '>= 2.58.0')
 goa_dep = dependency('goa-1.0', version: '>= 3.2.0')
-gweather_dep = dependency('gweather-3.0', version: '>= 40.0')
+gweather_dep = dependency('gweather4')
 geoclue_dep = dependency('libgeoclue-2.0', version: '>=2.4')
-geocode_dep = dependency('geocode-glib-1.0', version: '>=3.23')
+geocode_dep = dependency('geocode-glib-2.0', version: '>=3.23')
 m_dep = cc.find_library('m')
 
 gnome = import('gnome')
diff -Naur gnome-calendar-41.2.orig/src/gui/calendar-management/gcal-edit-calendar-page.c gnome-calendar-41.2/src/gui/calendar-management/gcal-edit-calendar-page.c
--- gnome-calendar-41.2.orig/src/gui/calendar-management/gcal-edit-calendar-page.c	2024-08-07 19:26:50.766373326 -0000
+++ gnome-calendar-41.2/src/gui/calendar-management/gcal-edit-calendar-page.c	2024-08-07 19:31:49.869236155 -0000
@@ -166,20 +166,13 @@
   /* If it's remote, build the uri */
   if (is_remote)
     {
-      ESourceAuthentication *auth;
-      g_autoptr (SoupURI) soup = NULL;
+      g_autoptr (GUri) guri = NULL;
       g_autofree gchar *uri = NULL;
       ESourceWebdav *webdav;
 
-      auth = e_source_get_extension (source, E_SOURCE_EXTENSION_AUTHENTICATION);
       webdav = e_source_get_extension (source, E_SOURCE_EXTENSION_WEBDAV_BACKEND);
-      soup = e_source_webdav_dup_soup_uri (webdav);
-      uri = g_strdup_printf ("%s://%s:%d%s",
-                             soup_uri_get_scheme (soup),
-                             e_source_authentication_get_host (auth),
-                             e_source_authentication_get_port (auth),
-                             e_source_webdav_get_resource_path (webdav));
-
+      guri = e_source_webdav_dup_uri (webdav);
+      uri = g_uri_to_string_partial (guri, G_URI_HIDE_PASSWORD);
       gtk_link_button_set_uri (GTK_LINK_BUTTON (self->calendar_url_button), uri);
       gtk_button_set_label (GTK_BUTTON (self->calendar_url_button), uri);
     }
diff -Naur gnome-calendar-41.2.orig/src/gui/calendar-management/gcal-new-calendar-page.c gnome-calendar-41.2/src/gui/calendar-management/gcal-new-calendar-page.c
--- gnome-calendar-41.2.orig/src/gui/calendar-management/gcal-new-calendar-page.c	2024-08-07 19:26:50.766373326 -0000
+++ gnome-calendar-41.2/src/gui/calendar-management/gcal-new-calendar-page.c	2024-08-07 21:00:52.940778398 -0000
@@ -346,15 +346,15 @@
 validate_url_cb (gpointer data)
 {
   GcalNewCalendarPage *self = data;
-  g_autoptr (SoupURI) uri = NULL;
+  g_autoptr (GUri) guri = NULL;
 
   GCAL_ENTRY;
 
   self->validate_url_resource_id = 0;
 
-  uri = soup_uri_new (gtk_entry_get_text (self->calendar_address_entry));
+  guri = g_uri_parse (gtk_entry_get_text (self->calendar_address_entry), SOUP_HTTP_URI_FLAGS | G_URI_FLAGS_PARSE_RELAXED, NULL);
 
-  if (uri != NULL && SOUP_URI_IS_VALID (uri))
+  if (guri != NULL && g_uri_get_scheme (guri) && g_uri_get_host (guri))
     {
       discover_sources (self);
     }
diff -Naur gnome-calendar-41.2.orig/src/gui/gcal-event-popover.c gnome-calendar-41.2/src/gui/gcal-event-popover.c
--- gnome-calendar-41.2.orig/src/gui/gcal-event-popover.c	2024-08-07 19:26:50.762373328 -0000
+++ gnome-calendar-41.2/src/gui/gcal-event-popover.c	2024-08-07 19:34:41.762157526 -0000
@@ -424,14 +424,14 @@
 static void
 setup_location_label (GcalEventPopover *self)
 {
-  g_autoptr (SoupURI) soup_uri = NULL;
+  g_autoptr (GUri) guri = NULL;
   g_autofree gchar *location = NULL;
 
   location = g_strdup (gcal_event_get_location (self->event));
   g_strstrip (location);
 
-  soup_uri = soup_uri_new (location);
-  if (soup_uri)
+  guri = g_uri_parse (location, SOUP_HTTP_URI_FLAGS | G_URI_FLAGS_PARSE_RELAXED, NULL);
+  if (guri)
     {
       GString *string;
 
diff -Naur gnome-calendar-41.2.orig/src/gui/gcal-weather-settings.c gnome-calendar-41.2/src/gui/gcal-weather-settings.c
--- gnome-calendar-41.2.orig/src/gui/gcal-weather-settings.c	2024-08-07 19:26:50.763373328 -0000
+++ gnome-calendar-41.2/src/gui/gcal-weather-settings.c	2024-08-07 20:28:45.197917445 -0000
@@ -33,12 +33,14 @@
   GtkSwitch          *weather_auto_location_switch;
   GtkWidget          *weather_location_entry;
 
+  GWeatherLocation   *location;
+
   GcalContext        *context;
 };
 
 
-static void          on_weather_location_searchbox_changed_cb    (GWeatherLocationEntry *entry,
-                                                                  GcalWeatherSettings   *self);
+static void          on_weather_location_searchbox_changed_cb    (GtkEntry            *entry,
+                                                                  GcalWeatherSettings *self);
 
 static void          on_show_weather_changed_cb                  (GtkSwitch           *wswitch,
                                                                   GParamSpec          *pspec,
@@ -111,7 +113,9 @@
       world = gweather_location_get_world ();
       weather_location = location ? gweather_location_deserialize (world, location) : NULL;
 
-      gweather_location_entry_set_location (GWEATHER_LOCATION_ENTRY (self->weather_location_entry), weather_location);
+      self->location = weather_location ? g_object_ref (weather_location) : NULL;
+      gtk_entry_set_text (GTK_ENTRY (self->weather_location_entry),
+                          self->location ? gweather_location_get_name (self->location) : "");
     }
 
   g_signal_handlers_unblock_by_func (self->show_weather_switch, on_show_weather_changed_cb, self);
@@ -124,7 +128,6 @@
 static void
 save_weather_settings (GcalWeatherSettings *self)
 {
-  g_autoptr (GWeatherLocation) location = NULL;
   GSettings *settings;
   GVariant *value;
   GVariant *vlocation;
@@ -135,8 +138,7 @@
   if (!self->context)
     GCAL_RETURN ();
 
-  location = gweather_location_entry_get_location (GWEATHER_LOCATION_ENTRY (self->weather_location_entry));
-  vlocation = location ? gweather_location_serialize (location) : NULL;
+  vlocation = self->location ? gweather_location_serialize (self->location) : NULL;
 
   settings = gcal_context_get_settings (self->context);
   value = g_variant_new ("(bbsmv)",
@@ -170,17 +172,13 @@
 static GWeatherLocation*
 get_checked_fixed_location (GcalWeatherSettings *self)
 {
-  g_autoptr (GWeatherLocation) location = NULL;
-
-  location = gweather_location_entry_get_location (GWEATHER_LOCATION_ENTRY (self->weather_location_entry));
-
   /*
    * NOTE: This check feels shabby. However, I couldn't find a better
    * one without iterating the model. has-custom-text does not work
    * properly. Lets go with it for now.
    */
-  if (location && gweather_location_get_name (location))
-    return g_steal_pointer (&location);
+  if (self->location && gweather_location_get_name (self->location))
+        return g_object_ref (self->location);
 
   return NULL;
 }
@@ -243,8 +241,8 @@
 }
 
 static void
-on_weather_location_searchbox_changed_cb (GWeatherLocationEntry *entry,
-                                          GcalWeatherSettings   *self)
+on_weather_location_searchbox_changed_cb (GtkEntry            *entry,
+                                          GcalWeatherSettings *self)
 {
   GtkStyleContext  *context;
   GWeatherLocation *location;
@@ -264,7 +262,7 @@
     {
       gtk_style_context_remove_class (context, "error");
       manage_weather_service (self);
-      gweather_location_unref (location);
+      g_object_unref (location);
     }
 }
 
@@ -278,6 +276,7 @@
 {
   GcalWeatherSettings *self = (GcalWeatherSettings *)object;
 
+  g_clear_object (&self->location);
   g_clear_object (&self->context);
 
   G_OBJECT_CLASS (gcal_weather_settings_parent_class)->finalize (object);
diff -Naur gnome-calendar-41.2.orig/src/gui/gcal-weather-settings.ui gnome-calendar-41.2/src/gui/gcal-weather-settings.ui
--- gnome-calendar-41.2.orig/src/gui/gcal-weather-settings.ui	2024-08-07 19:26:50.763373328 -0000
+++ gnome-calendar-41.2/src/gui/gcal-weather-settings.ui	2024-08-07 20:25:25.474922530 -0000
@@ -63,7 +63,7 @@
       </object>
     </child>
     <child>
-      <object class="GWeatherLocationEntry" id="weather_location_entry">
+      <object class="GtkEntry" id="weather_location_entry">
         <property name="visible">True</property>
         <property name="can_focus">True</property>
         <property name="primary_icon_name">edit-find-symbolic</property>
diff -Naur gnome-calendar-41.2.orig/src/utils/gcal-source-discoverer.c gnome-calendar-41.2/src/utils/gcal-source-discoverer.c
--- gnome-calendar-41.2.orig/src/utils/gcal-source-discoverer.c	2024-08-07 19:26:50.759373330 -0000
+++ gnome-calendar-41.2/src/utils/gcal-source-discoverer.c	2024-08-07 19:45:17.574061144 -0000
@@ -59,7 +59,7 @@
 create_source_for_uri (DiscovererData  *data)
 {
   ESourceAuthentication *auth;
-  g_autoptr (SoupURI) soup_uri = NULL;
+  g_autoptr (GUri) guri = NULL;
   g_autofree gchar *display_name = NULL;
   g_autofree gchar *basename = NULL;
   ESourceExtension *ext;
@@ -68,18 +68,18 @@
   const gchar *host;
   const gchar *path;
 
-  soup_uri = soup_uri_new (data->uri);
-  if (!soup_uri)
+  guri = g_uri_parse (data->uri, SOUP_HTTP_URI_FLAGS | G_URI_FLAGS_PARSE_RELAXED, NULL);
+  if (!guri)
     GCAL_RETURN (NULL);
 
-  host = soup_uri_get_host (soup_uri);
+  host = g_uri_get_host (guri);
 
   /* Create the new source and add the needed extensions */
   source = e_source_new (NULL, NULL, NULL);
   e_source_set_parent (source, "webcal-stub");
 
   /* Display name */
-  path = soup_uri_get_path (soup_uri);
+  path = g_uri_get_path (guri);
   basename = g_path_get_basename (path);
   display_name = gcal_utils_format_filename_for_display (basename);
   e_source_set_display_name (source, display_name);
@@ -93,7 +93,7 @@
 
   /* Webdav */
   webdav = e_source_get_extension (source, E_SOURCE_EXTENSION_WEBDAV_BACKEND);
-  e_source_webdav_set_soup_uri (webdav, soup_uri);
+  e_source_webdav_set_uri (webdav, guri);
 
   return source;
 }
@@ -103,15 +103,15 @@
                           GSList                  *user_addresses,
                           EWebDAVDiscoveredSource *discovered_source)
 {
-  g_autoptr (SoupURI) soup_uri = NULL;
+  g_autoptr (GUri) guri = NULL;
   ESourceSelectable *selectable;
   ESourceExtension *ext;
   ESourceWebdav *webdav;
   ESource *new_source;
   const gchar *resource_path;
 
-  soup_uri = soup_uri_new (discovered_source->href);
-  resource_path = soup_uri_get_path (soup_uri);
+  guri = g_uri_parse (discovered_source->href, SOUP_HTTP_URI_FLAGS | G_URI_FLAGS_PARSE_RELAXED, NULL);
+  resource_path = g_uri_get_path (guri);
 
   new_source = e_source_new (NULL, NULL, NULL);
   e_source_set_parent (new_source, "local");
@@ -188,9 +188,8 @@
  * Callbacks
  */
 
-static void
-on_soup_session_authenticate_cb (SoupSession *session,
-                                 SoupMessage *message,
+static gboolean
+on_soup_message_authenticate_cb (SoupMessage *mesage,
                                  SoupAuth    *auth,
                                  gboolean     retrying,
                                  gpointer     user_data)
@@ -199,8 +198,8 @@
 
   if (data->username && data->password)
     soup_auth_authenticate (auth, data->username, data->password);
-  else
-    soup_message_set_status (message, SOUP_STATUS_UNAUTHORIZED);
+
+  return TRUE;
 }
 
 typedef GPtrArray* (*DiscoverFunc) (DiscovererData  *data,
@@ -216,24 +215,28 @@
   g_autoptr (SoupMessage) message = NULL;
   g_autoptr (SoupSession) session = NULL;
   g_autoptr (GPtrArray) source = NULL;
-  g_autoptr (SoupURI) uri = NULL;
+  g_autoptr (GUri) guri = NULL;
   g_autofree gchar *uri_str = NULL;
   const gchar *content_type;
 
   GCAL_ENTRY;
 
-  uri = soup_uri_new (data->uri);
+  guri = g_uri_parse (data->uri, SOUP_HTTP_URI_FLAGS | G_URI_FLAGS_PARSE_RELAXED, NULL);
 
-  if (g_strcmp0 (soup_uri_get_scheme (uri), "webcal") == 0)
-    soup_uri_set_scheme (uri, SOUP_URI_SCHEME_HTTPS);
+  if (!guri)
+    GCAL_RETURN (NULL);
 
-  uri_str = soup_uri_to_string (uri, FALSE);
+  if (g_strcmp0 (g_uri_get_scheme (guri), "webcal") == 0)
+    e_util_change_uri_component (&guri, SOUP_URI_SCHEME, "https");
+
+  uri_str = g_uri_to_string_partial (guri, G_URI_HIDE_PASSWORD);
   GCAL_TRACE_MSG ("Creating request for %s", uri_str);
 
-  session = soup_session_new_with_options (SOUP_SESSION_TIMEOUT, 10, NULL);
-  g_signal_connect (session, "authenticate", G_CALLBACK (on_soup_session_authenticate_cb), data);
+  session = soup_session_new_with_options ("timeout", 10, NULL);
+
+  message = soup_message_new_from_uri ("GET", guri);
+  g_signal_connect (message, "authenticate", G_CALLBACK (on_soup_message_authenticate_cb), data);
 
-  message = soup_message_new_from_uri ("GET", uri);
   input_stream = soup_session_send (session, message, cancellable, error);
 
   if (!input_stream)
@@ -241,16 +244,16 @@
 
   g_input_stream_close (input_stream, cancellable, error);
 
-  content_type = soup_message_headers_get_content_type (message->response_headers, NULL);
-  GCAL_TRACE_MSG ("Message retrieved, content type: %s, status code: %u", content_type, message->status_code);
+  content_type = soup_message_headers_get_content_type (soup_message_get_response_headers (message), NULL);
+  GCAL_TRACE_MSG ("Message retrieved, content type: %s, status code: %u", content_type, soup_message_get_status (message));
 
-  if (is_authentication_error (message->status_code))
+  if (is_authentication_error (soup_message_get_status (message)))
     {
       g_set_error (error,
                    GCAL_SOURCE_DISCOVERER_ERROR,
                    GCAL_SOURCE_DISCOVERER_ERROR_UNAUTHORIZED,
                    "%s",
-                   soup_status_get_phrase (message->status_code));
+                   soup_message_get_reason_phrase (message));
 
       GCAL_RETURN (NULL);
     }
@@ -300,7 +303,8 @@
 
   if (local_error)
     {
-      if (is_authentication_error (local_error->code))
+      if (local_error->domain == E_SOUP_SESSION_ERROR &&
+          is_authentication_error (local_error->code))
         {
           g_set_error (error,
                        GCAL_SOURCE_DISCOVERER_ERROR,
diff -Naur gnome-calendar-41.2.orig/src/weather/gcal-weather-service.c gnome-calendar-41.2/src/weather/gcal-weather-service.c
--- gnome-calendar-41.2.orig/src/weather/gcal-weather-service.c	2024-08-07 19:26:50.759373330 -0000
+++ gnome-calendar-41.2/src/weather/gcal-weather-service.c	2024-08-07 20:26:19.494921529 -0000
@@ -665,7 +665,7 @@
 update_gclue_location (GcalWeatherService  *self,
                        GClueLocation       *location)
 {
-  GWeatherLocation *wlocation = NULL; /* owned */
+  g_autoptr (GWeatherLocation) wlocation = NULL; /* owned */
 
   if (location)
     {
@@ -682,8 +682,6 @@
     }
 
   update_location (self, wlocation);
-
-  g_clear_pointer (&wlocation, gweather_location_unref);
 }
 
 
diff -Naur gnome-calendar-41.2.orig/src/weather/gcal-weather-service.h gnome-calendar-41.2/src/weather/gcal-weather-service.h
--- gnome-calendar-41.2.orig/src/weather/gcal-weather-service.h	2024-08-07 19:26:50.759373330 -0000
+++ gnome-calendar-41.2/src/weather/gcal-weather-service.h	2024-08-07 20:26:48.077920886 -0000
@@ -20,8 +20,7 @@
 #define GCAL_WEATHER_SERVICE_H
 
 #include <libgweather/gweather.h>
-#include <glib-object.h>
-#include <glib.h>
+#include <gtk/gtk.h>
 
 #include "gcal-weather-info.h"
 
diff -Naur gnome-calendar-41.2.orig/tests/gcal-simple-server.c gnome-calendar-41.2/tests/gcal-simple-server.c
--- gnome-calendar-41.2.orig/tests/gcal-simple-server.c	2024-08-07 19:26:50.754373332 -0000
+++ gnome-calendar-41.2/tests/gcal-simple-server.c	2024-08-07 20:33:46.648906361 -0000
@@ -30,7 +30,7 @@
   GThread            *thread;
   GMainLoop          *thread_mainloop;
   SoupServer         *server;
-  gchar              *uri;
+  GUri               *uri;
 
   GMutex              running_mutex;
   GCond               running_cond;
@@ -45,7 +45,7 @@
  */
 
 static void
-process_get (SoupMessage *message,
+process_get (SoupServerMessage *message,
              const gchar *prefix,
              const gchar *path)
 {
@@ -55,16 +55,16 @@
   if (g_strcmp0 (path, calendar_path) == 0)
     {
       g_debug ("Serving empty calendar");
-      soup_message_set_response (message,
-                                 "text/calendar",
-                                 SOUP_MEMORY_STATIC,
-                                 GCAL_TEST_SERVER_EMPTY_CALENDAR,
-                                 strlen (GCAL_TEST_SERVER_EMPTY_CALENDAR));
+      soup_server_message_set_response (message,
+                                        "text/calendar",
+                                        SOUP_MEMORY_STATIC,
+                                        GCAL_TEST_SERVER_EMPTY_CALENDAR,
+                                        strlen (GCAL_TEST_SERVER_EMPTY_CALENDAR));
     }
 
   if (g_strcmp0 (path, calendar_file) == 0)
     {
-      g_autoptr (SoupBuffer) buffer = NULL;
+      g_autoptr (GBytes) bytes = NULL;
       GMappedFile *mapping;
 
       g_debug ("Serving calendar.ics");
@@ -72,20 +72,20 @@
       mapping = g_mapped_file_new (path, FALSE, NULL);
       if (!mapping)
         {
-          soup_message_set_status (message, SOUP_STATUS_INTERNAL_SERVER_ERROR);
+          soup_server_message_set_status (message, SOUP_STATUS_INTERNAL_SERVER_ERROR, NULL);
           return;
         }
 
-      buffer = soup_buffer_new_with_owner (g_mapped_file_get_contents (mapping),
-                                           g_mapped_file_get_length (mapping),
-                                           mapping,
-                                           (GDestroyNotify)g_mapped_file_unref);
-      soup_message_body_append_buffer (message->response_body, buffer);
+      bytes = g_bytes_new_with_free_func (g_mapped_file_get_contents (mapping),
+                                          g_mapped_file_get_length (mapping),
+                                          (GDestroyNotify)g_mapped_file_unref,
+                                          mapping);
+      soup_message_body_append_bytes (soup_server_message_get_response_body (message), bytes);
     }
 }
 
 static void
-process_caldav (SoupMessage *message,
+process_caldav (SoupServerMessage *message,
                 const gchar *path)
 {
   g_debug ("Processing CalDAV request");
@@ -108,46 +108,44 @@
 
 static void
 no_auth_handler_cb (SoupServer        *server,
-                    SoupMessage       *message,
+                    SoupServerMessage *message,
                     const gchar       *path,
                     GHashTable        *query,
-                    SoupClientContext *client,
                     gpointer           user_data)
 {
   g_debug ("No authenticaton needed");
 
-  if (message->method == SOUP_METHOD_GET)
+  if (g_strcmp0 (soup_server_message_get_method (message), SOUP_METHOD_GET) == 0)
     process_get (message, "/public", path);
-  else if (message->method == SOUP_METHOD_PROPFIND)
+  else if (g_strcmp0 (soup_server_message_get_method (message), SOUP_METHOD_PROPFIND) == 0)
     process_caldav (message, path);
   else
-    soup_message_set_status (message, SOUP_STATUS_NOT_IMPLEMENTED);
+    soup_server_message_set_status (message, SOUP_STATUS_NOT_IMPLEMENTED, NULL);
 }
 
 static void
 auth_handler_cb (SoupServer        *server,
-                 SoupMessage       *message,
+                 SoupServerMessage *message,
                  const gchar       *path,
                  GHashTable        *query,
-                 SoupClientContext *client,
                  gpointer           user_data)
 {
   g_debug ("Needs authenticaton");
 
-  if (message->method == SOUP_METHOD_GET)
+  if (g_strcmp0 (soup_server_message_get_method (message), SOUP_METHOD_GET) == 0)
     process_get (message, "/secret-area", path);
-  else if (message->method == SOUP_METHOD_PROPFIND)
+  else if (g_strcmp0 (soup_server_message_get_method (message), SOUP_METHOD_PROPFIND) == 0)
     process_caldav (message, path);
   else
-    soup_message_set_status (message, SOUP_STATUS_NOT_IMPLEMENTED);
+    soup_server_message_set_status (message, SOUP_STATUS_NOT_IMPLEMENTED, NULL);
 }
 
 static gboolean
-authorize_cb (SoupAuthDomain *domain,
-              SoupMessage    *message,
-              const char     *username,
-              const char     *password,
-              gpointer        user_data)
+authorize_cb (SoupAuthDomain    *domain,
+              SoupServerMessage *message,
+              const char        *username,
+              const char        *password,
+              gpointer           user_data)
 {
   const struct {
     const gchar *username;
@@ -183,7 +181,7 @@
   g_autoptr (GMainContext) context = NULL;
   g_autoptr (SoupServer) server = NULL;
   g_autoptr (GMainLoop) mainloop = NULL;
-  g_autoslist (SoupURI) uris = NULL;
+  g_autoslist (GUri) uris = NULL;
   g_autoptr (GError) error = NULL;
   GcalSimpleServer *self = data;
   g_autofree gchar *uri = NULL;
@@ -193,15 +191,15 @@
   mainloop = g_main_loop_new (context, FALSE);
   self->thread_mainloop = mainloop;
 
-  server = soup_server_new (SOUP_SERVER_SERVER_HEADER, "gcal-simple-server",
+  server = soup_server_new ("server-header", "gcal-simple-server",
                             NULL);
 
   /* Anything under /secret-area and /private requires authentication */
-  domain = soup_auth_domain_basic_new (SOUP_AUTH_DOMAIN_REALM, "GcalSimpleServer",
-                                       SOUP_AUTH_DOMAIN_BASIC_AUTH_CALLBACK, authorize_cb,
-                                       SOUP_AUTH_DOMAIN_BASIC_AUTH_DATA, self,
-                                       SOUP_AUTH_DOMAIN_ADD_PATH, "/secret-area",
+  domain = soup_auth_domain_basic_new ("realm", "GcalSimpleServer",
+                                       "auth-callback", authorize_cb,
+                                       "auth-data", self,
                                        NULL);
+  soup_auth_domain_add_path (domain, "/secret-area");
   soup_server_add_auth_domain (server, domain);
 
   soup_server_listen_local (server, 0, SOUP_SERVER_LISTEN_IPV4_ONLY, &error);
@@ -218,8 +216,8 @@
   uris = soup_server_get_uris (server);
   g_assert_cmpint (g_slist_length (uris), ==, 1);
 
-  uri = soup_uri_to_string (uris->data, FALSE);
-  self->uri = g_strdup (uri);
+  self->uri = g_uri_ref (uris->data);
+  uri = g_uri_to_string_partial (self->uri, G_URI_HIDE_PASSWORD);
 
   g_debug ("Listening on %s", uri);
 
@@ -252,7 +250,7 @@
   if (self->thread)
     gcal_simple_server_stop (self);
 
-  g_clear_pointer (&self->uri, g_free);
+  g_clear_pointer (&self->uri, g_uri_unref);
 
   G_OBJECT_CLASS (gcal_simple_server_parent_class)->finalize (object);
 }
@@ -299,6 +297,7 @@
 gcal_simple_server_stop (GcalSimpleServer *self)
 {
   GMainContext *context;
+  g_autoptr (GSource) source;
 
   g_return_if_fail (GCAL_IS_SIMPLE_SERVER (self));
 
@@ -309,7 +308,10 @@
     }
 
   context = g_main_loop_get_context (self->thread_mainloop);
-  soup_add_completion (context, idle_quit_server_cb, self);
+  source = g_idle_source_new ();
+  g_source_set_priority (source, G_PRIORITY_DEFAULT);
+  g_source_set_callback (source, idle_quit_server_cb, self, NULL);
+  g_source_attach (source, context);
 
   g_mutex_lock (&self->running_mutex);
   self->running = FALSE;
@@ -320,11 +322,11 @@
   self->thread = NULL;
 }
 
-SoupURI*
+GUri*
 gcal_simple_server_get_uri (GcalSimpleServer *self)
 {
   g_return_val_if_fail (GCAL_IS_SIMPLE_SERVER (self), NULL);
   g_return_val_if_fail (self->thread != NULL, NULL);
 
-  return soup_uri_new (self->uri);
+  return g_uri_ref (self->uri);
 }
diff -Naur gnome-calendar-41.2.orig/tests/gcal-simple-server.h gnome-calendar-41.2/tests/gcal-simple-server.h
--- gnome-calendar-41.2.orig/tests/gcal-simple-server.h	2024-08-07 19:26:50.754373332 -0000
+++ gnome-calendar-41.2/tests/gcal-simple-server.h	2024-08-07 19:55:20.036029391 -0000
@@ -40,6 +40,6 @@
 
 void                 gcal_simple_server_stop                     (GcalSimpleServer   *self);
 
-SoupURI*             gcal_simple_server_get_uri                  (GcalSimpleServer   *self);
+GUri*                gcal_simple_server_get_uri                  (GcalSimpleServer   *self);
 
 G_END_DECLS
diff -Naur gnome-calendar-41.2.orig/tests/test-discoverer.c gnome-calendar-41.2/tests/test-discoverer.c
--- gnome-calendar-41.2.orig/tests/test-discoverer.c	2024-08-07 19:26:50.755373332 -0000
+++ gnome-calendar-41.2/tests/test-discoverer.c	2024-08-07 19:57:34.966023051 -0000
@@ -59,14 +59,14 @@
 {
   g_autoptr (GcalSimpleServer) server = NULL;
   g_autoptr (GMainLoop) mainloop = NULL;
-  g_autoptr (SoupURI) uri = NULL;
+  g_autoptr (GUri) uri = NULL;
   g_autofree gchar *uri_str = NULL;
 
   server = init_server ();
   uri = gcal_simple_server_get_uri (server);
-  soup_uri_set_path (uri, "/public/calendar");
+  e_util_change_uri_component (&uri, SOUP_URI_PATH, "/public/calendar");
 
-  uri_str = soup_uri_to_string (uri, FALSE);
+  uri_str = g_uri_to_string_partial (uri, G_URI_HIDE_PASSWORD);
 
   mainloop = g_main_loop_new (NULL, FALSE);
 
@@ -104,14 +104,14 @@
 {
   g_autoptr (GcalSimpleServer) server = NULL;
   g_autoptr (GMainLoop) mainloop = NULL;
-  g_autoptr (SoupURI) uri = NULL;
+  g_autoptr (GUri) uri = NULL;
   g_autofree gchar *uri_str = NULL;
 
   server = init_server ();
   uri = gcal_simple_server_get_uri (server);
-  soup_uri_set_path (uri, "/secret-area/calendar");
+  e_util_change_uri_component (&uri, SOUP_URI_PATH, "/secret-area/calendar");
 
-  uri_str = soup_uri_to_string (uri, FALSE);
+  uri_str = g_uri_to_string_partial (uri, G_URI_HIDE_PASSWORD);
 
   mainloop = g_main_loop_new (NULL, FALSE);
 
@@ -149,14 +149,14 @@
 {
   g_autoptr (GcalSimpleServer) server = NULL;
   g_autoptr (GMainLoop) mainloop = NULL;
-  g_autoptr (SoupURI) uri = NULL;
+  g_autoptr (GUri) uri = NULL;
   g_autofree gchar *uri_str = NULL;
 
   server = init_server ();
   uri = gcal_simple_server_get_uri (server);
-  soup_uri_set_path (uri, "/secret-area/dav");
+  e_util_change_uri_component (&uri, SOUP_URI_PATH, "/secret-area/dav");
 
-  uri_str = soup_uri_to_string (uri, FALSE);
+  uri_str = g_uri_to_string_partial (uri, G_URI_HIDE_PASSWORD);
 
   mainloop = g_main_loop_new (NULL, FALSE);
 
diff -Naur gnome-calendar-41.2.orig/tests/test-server.c gnome-calendar-41.2/tests/test-server.c
--- gnome-calendar-41.2.orig/tests/test-server.c	2024-08-07 19:26:50.755373332 -0000
+++ gnome-calendar-41.2/tests/test-server.c	2024-08-07 20:36:15.187898695 -0000
@@ -19,6 +19,7 @@
  */
 
 #include <libsoup/soup.h>
+#include <libedataserver/libedataserver.h>
 
 #include "gcal-simple-server.h"
 
@@ -33,9 +34,8 @@
   return g_steal_pointer (&server);
 }
 
-static void
-fail_authenticate_cb (SoupSession *session,
-                      SoupMessage *message,
+static gboolean
+fail_authenticate_cb (SoupMessage *message,
                       SoupAuth    *auth,
                       gboolean     retrying,
                       gpointer     user_data)
@@ -45,11 +45,12 @@
   gcal_simple_server_stop (server);
 
   g_assert_not_reached ();
+
+  return TRUE;
 }
 
-static void
-authenticate_cb (SoupSession *session,
-                 SoupMessage *message,
+static gboolean
+authenticate_cb (SoupMessage *message,
                  SoupAuth    *auth,
                  gboolean     retrying,
                  gpointer     user_data)
@@ -57,19 +58,24 @@
   g_debug ("Authenticating...");
 
   soup_auth_authenticate (auth, "unicorn", "iamnotahorse");
+
+  return TRUE;
 }
 
-static void
-wrong_authenticate_cb (SoupSession *session,
-                       SoupMessage *message,
+static gboolean
+wrong_authenticate_cb (SoupMessage *message,
                        SoupAuth    *auth,
                        gboolean     retrying,
                        gpointer     user_data)
 {
   g_debug ("Authenticating with wrong username...");
 
-  if (!retrying)
-    soup_auth_authenticate (auth, "thyartismurder", "popmusic");
+  if (retrying)
+    return FALSE;
+
+  soup_auth_authenticate (auth, "thyartismurder", "popmusic");
+
+  return TRUE;
 }
 
 /*********************************************************************************************************************/
@@ -91,18 +97,20 @@
   g_autoptr (GcalSimpleServer) server = NULL;
   g_autoptr (SoupMessage) message = NULL;
   g_autoptr (SoupSession) session = NULL;
-  g_autoptr (SoupURI) uri = NULL;
+  g_autoptr (GInputStream) input_stream = NULL;
+  g_autoptr (GUri) uri = NULL;
   g_autoptr (GError) error = NULL;
 
   server = init_server ();
   uri = gcal_simple_server_get_uri (server);
 
   session = soup_session_new ();
-  g_signal_connect (session, "authenticate", G_CALLBACK (fail_authenticate_cb), server);
 
   message = soup_message_new_from_uri ("GET", uri);
-  soup_session_send (session, message, NULL, &error);
+  g_signal_connect (message, "authenticate", G_CALLBACK (fail_authenticate_cb), server);
+  input_stream = soup_session_send (session, message, NULL, &error);
   g_assert_no_error (error);
+  g_assert_nonnull (input_stream);
 }
 
 /*********************************************************************************************************************/
@@ -113,19 +121,21 @@
   g_autoptr (GcalSimpleServer) server = NULL;
   g_autoptr (SoupMessage) message = NULL;
   g_autoptr (SoupSession) session = NULL;
-  g_autoptr (SoupURI) uri = NULL;
+  g_autoptr (GInputStream) input_stream = NULL;
+  g_autoptr (GUri) uri = NULL;
   g_autoptr (GError) error = NULL;
 
   server = init_server ();
   uri = gcal_simple_server_get_uri (server);
-  soup_uri_set_path (uri, "/public/calendar.ics");
+  e_util_change_uri_component (&uri, SOUP_URI_PATH, "/public/calendar.ics");
 
   session = soup_session_new ();
-  g_signal_connect (session, "authenticate", G_CALLBACK (fail_authenticate_cb), server);
 
   message = soup_message_new_from_uri ("GET", uri);
-  soup_session_send (session, message, NULL, &error);
+  g_signal_connect (message, "authenticate", G_CALLBACK (fail_authenticate_cb), server);
+  input_stream = soup_session_send (session, message, NULL, &error);
   g_assert_no_error (error);
+  g_assert_nonnull (input_stream);
 }
 
 /*********************************************************************************************************************/
@@ -136,19 +146,21 @@
   g_autoptr (GcalSimpleServer) server = NULL;
   g_autoptr (SoupMessage) message = NULL;
   g_autoptr (SoupSession) session = NULL;
-  g_autoptr (SoupURI) uri = NULL;
+  g_autoptr (GInputStream) input_stream = NULL;
+  g_autoptr (GUri) uri = NULL;
   g_autoptr (GError) error = NULL;
 
   server = init_server ();
   uri = gcal_simple_server_get_uri (server);
-  soup_uri_set_path (uri, "/public/calendar");
+  e_util_change_uri_component (&uri, SOUP_URI_PATH, "/public/calendar");
 
   session = soup_session_new ();
-  g_signal_connect (session, "authenticate", G_CALLBACK (fail_authenticate_cb), server);
 
   message = soup_message_new_from_uri ("GET", uri);
-  soup_session_send (session, message, NULL, &error);
+  g_signal_connect (message, "authenticate", G_CALLBACK (fail_authenticate_cb), server);
+  input_stream = soup_session_send (session, message, NULL, &error);
   g_assert_no_error (error);
+  g_assert_nonnull (input_stream);
 }
 
 /*********************************************************************************************************************/
@@ -159,19 +171,21 @@
   g_autoptr (GcalSimpleServer) server = NULL;
   g_autoptr (SoupMessage) message = NULL;
   g_autoptr (SoupSession) session = NULL;
-  g_autoptr (SoupURI) uri = NULL;
+  g_autoptr (GInputStream) input_stream = NULL;
+  g_autoptr (GUri) uri = NULL;
   g_autoptr (GError) error = NULL;
 
   server = init_server ();
   uri = gcal_simple_server_get_uri (server);
-  soup_uri_set_path (uri, "/secret-area");
+  e_util_change_uri_component (&uri, SOUP_URI_PATH, "/secret-area");
 
   session = soup_session_new ();
-  g_signal_connect (session, "authenticate", G_CALLBACK (authenticate_cb), server);
 
   message = soup_message_new_from_uri ("GET", uri);
-  soup_session_send (session, message, NULL, &error);
+  g_signal_connect (message, "authenticate", G_CALLBACK (authenticate_cb), server);
+  input_stream = soup_session_send (session, message, NULL, &error);
   g_assert_no_error (error);
+  g_assert_nonnull (input_stream);
 }
 
 /*********************************************************************************************************************/
@@ -182,19 +196,21 @@
   g_autoptr (GcalSimpleServer) server = NULL;
   g_autoptr (SoupMessage) message = NULL;
   g_autoptr (SoupSession) session = NULL;
-  g_autoptr (SoupURI) uri = NULL;
+  g_autoptr (GInputStream) input_stream = NULL;
+  g_autoptr (GUri) uri = NULL;
   g_autoptr (GError) error = NULL;
 
   server = init_server ();
   uri = gcal_simple_server_get_uri (server);
-  soup_uri_set_path (uri, "/secret-area/calendar");
+  e_util_change_uri_component (&uri, SOUP_URI_PATH, "/secret-area/calendar");
 
   session = soup_session_new ();
-  g_signal_connect (session, "authenticate", G_CALLBACK (authenticate_cb), server);
 
   message = soup_message_new_from_uri ("GET", uri);
-  soup_session_send (session, message, NULL, &error);
+  g_signal_connect (message, "authenticate", G_CALLBACK (authenticate_cb), server);
+  input_stream = soup_session_send (session, message, NULL, &error);
   g_assert_no_error (error);
+  g_assert_nonnull (input_stream);
 }
 
 /*********************************************************************************************************************/
@@ -205,19 +221,21 @@
   g_autoptr (GcalSimpleServer) server = NULL;
   g_autoptr (SoupMessage) message = NULL;
   g_autoptr (SoupSession) session = NULL;
-  g_autoptr (SoupURI) uri = NULL;
+  g_autoptr (GInputStream) input_stream = NULL;
+  g_autoptr (GUri) uri = NULL;
   g_autoptr (GError) error = NULL;
 
   server = init_server ();
   uri = gcal_simple_server_get_uri (server);
-  soup_uri_set_path (uri, "/secret-area/calendar.ics");
+  e_util_change_uri_component (&uri, SOUP_URI_PATH, "/secret-area/calendar.ics");
 
   session = soup_session_new ();
-  g_signal_connect (session, "authenticate", G_CALLBACK (authenticate_cb), server);
 
   message = soup_message_new_from_uri ("GET", uri);
-  soup_session_send (session, message, NULL, &error);
+  g_signal_connect (message, "authenticate", G_CALLBACK (authenticate_cb), server);
+  input_stream = soup_session_send (session, message, NULL, &error);
   g_assert_no_error (error);
+  g_assert_nonnull (input_stream);
 }
 
 /*********************************************************************************************************************/
@@ -228,20 +246,23 @@
   g_autoptr (GcalSimpleServer) server = NULL;
   g_autoptr (SoupMessage) message = NULL;
   g_autoptr (SoupSession) session = NULL;
-  g_autoptr (SoupURI) uri = NULL;
+  g_autoptr (GInputStream) input_stream = NULL;
+  g_autoptr (GUri) uri = NULL;
   g_autoptr (GError) error = NULL;
 
   server = init_server ();
   uri = gcal_simple_server_get_uri (server);
-  soup_uri_set_path (uri, "/secret-area");
+  e_util_change_uri_component (&uri, SOUP_URI_PATH, "/secret-area");
 
   session = soup_session_new ();
-  g_signal_connect (session, "authenticate", G_CALLBACK (wrong_authenticate_cb), server);
 
   message = soup_message_new_from_uri ("GET", uri);
-  soup_session_send (session, message, NULL, &error);
+  g_signal_connect (message, "authenticate", G_CALLBACK (wrong_authenticate_cb), server);
+
+  input_stream = soup_session_send (session, message, NULL, &error);
   g_assert_no_error (error);
-  g_assert_cmpuint (message->status_code, ==, SOUP_STATUS_UNAUTHORIZED);
+  g_assert_nonnull (input_stream);
+  g_assert_cmpuint (soup_message_get_status (message), ==, SOUP_STATUS_UNAUTHORIZED);
 }
 
 /*********************************************************************************************************************/
